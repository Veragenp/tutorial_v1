from pybit.unified_trading import HTTP, WebSocket
import logging
import time
import requests

class BybitAPI:
    def __init__(self, api_key=None, api_secret=None):
        self.logger = logging.getLogger(__name__)  # Инициализация logger внутри класса
        self.session = HTTP(
            api_key=api_key,
            api_secret=api_secret
        )
        self.ws = WebSocket(testnet=False, channel_type="linear")

    def get_last_7_days_high_low(self, symbol, days=7):
        """Получает high и low за последние 7 дней, исключая текущий день."""
        try:
            end_time = int(time.time() * 1000) - (86400 * 1000)
            start_time = end_time - (days * 86400 * 1000)
            response = self.session.get_kline(
                category="linear",
                symbol=symbol,
                interval="D",
                start=start_time,
                end=end_time,
                limit=days
            )
            if response['retCode'] == 0 and response['result']['list']:
                candles = response['result']['list']
                candles.sort(key=lambda x: int(x[0]), reverse=True)
                return [(float(candle[2]), float(candle[3])) for candle in candles]
            self.logger.error(f"Ошибка получения исторических данных для {symbol}: {response['retMsg']}")
            return []
        except Exception as e:
            self.logger.error(f"Ошибка при запросе исторических данных для {symbol}: {e}")
            return []

    def get_24h_volume(self, symbol):
        """Получает объём торгов за последние 24 часа в USDT."""
        try:
            base_url = "https://api.bybit.com"
            endpoint = "/v5/market/tickers"
            params = {"category": "linear", "symbol": symbol}
            response = requests.get(base_url + endpoint, params=params)
            data = response.json()
            if data["retCode"] == 0 and data["result"]["list"]:
                return float(data["result"]["list"][0]["turnover24h"])
            self.logger.error(f"Не удалось получить объем для {symbol}: {data.get('retMsg', 'Нет данных')}")
            return 0
        except Exception as e:
            self.logger.error(f"Ошибка при запросе объема для {symbol}: {e}")
            return 0

    def get_instrument_info(self, symbol):
        """Для populate_static_data.py."""
        try:
            response = self.session.get_instruments_info(category="linear", symbol=symbol)
            if response['retCode'] == 0 and response['result']['list']:
                return response['result']['list'][0]
            return {}
        except Exception as e:
            self.logger.error(f"Ошибка при получении информации об инструменте {symbol}: {e}")
            return {}

    def get_fee_rates(self, symbol):
        """Получает комиссии для символа."""
        try:
            response = self.session.get_fee_rates(category="linear", symbol=symbol)
            if response['retCode'] == 0 and response['result']['list']:
                fee_data = response['result']['list'][0]
                maker_fee = float(fee_data.get('makerFeeRate', 0))
                taker_fee = float(fee_data.get('takerFeeRate', 0))
                return maker_fee, taker_fee
            self.logger.error(f"Не удалось получить комиссии для {symbol}: {response['retMsg']}")
            return 0, 0
        except Exception as e:
            self.logger.error(f"Ошибка при запросе комиссий для {symbol}: {e}")
            return 0, 0

    def get_futures_instruments(self, limit=500):
        """Получает полный список фьючерсных инструментов с пагинацией."""
        try:
            all_symbols = []
            cursor = None
            while True:
                response = self.session.get_instruments_info(
                    category="linear",
                    limit=limit,
                    cursor=cursor
                )
                if response['retCode'] != 0:
                    self.logger.error(f"Ошибка получения списка фьючерсов: {response['retMsg']}")
                    return all_symbols
                
                instruments = response['result']['list']
                all_symbols.extend([item['symbol'] for item in instruments])
                cursor = response['result'].get('nextPageCursor')
                
                self.logger.info(f"Получено {len(instruments)} символов, всего: {len(all_symbols)}")
                if not cursor or len(instruments) < limit:  # Нет следующей страницы или конец списка
                    break
                time.sleep(0.1)  # Задержка для соблюдения лимитов API
            
            self.logger.info(f"Всего получено {len(all_symbols)} фьючерсных инструментов")
            return all_symbols
        except Exception as e:
            self.logger.error(f"Ошибка при запросе списка фьючерсов: {e}")
            return []

    def subscribe_to_ticker(self, symbols, callback):
        """Подписка на текущие цены через WebSocket."""
        def handle_message(message):
            if 'topic' in message and 'data' in message:
                symbol = message['topic'].split('.')[1]
                last_price = float(message['data']['lastPrice'])
                callback(symbol, last_price)

        for symbol in symbols:
            self.ws.ticker_stream(symbol=symbol, callback=handle_message)



            import gspread
from google.oauth2.service_account import Credentials
import logging
import os
try:
    from config import GOOGLE_SHEETS_CREDENTIALS, GOOGLE_SHEETS_ID
except ImportError as e:
    print(f"Ошибка импорта из config.py: {str(e)}")
    raise

# Получаем абсолютный путь к корню проекта (поднимаемся на уровень выше из src)
project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
log_dir = os.path.join(project_dir, "Logs")
os.makedirs(log_dir, exist_ok=True)

# Отладочный вывод пути
print(f"Текущая директория: {os.getcwd()}")
print(f"Путь к папке логов: {log_dir}")

# Путь к файлу логов
log_file = os.path.join(log_dir, "debug.log")

# Настройка логирования с выводом в консоль и файл
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, mode='a', encoding='utf-8'),  # Указываем кодировку UTF-8
        logging.StreamHandler()  # Логи в консоль
    ]
)

# Проверка, работает ли FileHandler
try:
    logging.info(f"Лог-файл настроен на: {log_file}")
    print(f"Лог-файл настроен на: {log_file}")
except Exception as e:
    print(f"Ошибка настройки лога: {str(e)}")
    logging.error(f"Ошибка настройки лога: {str(e)}")

class GoogleSheetsClient:
    def __init__(self):
        logging.info("Инициализация GoogleSheetsClient")
        print("Инициализация GoogleSheetsClient")
        logging.info(f"GOOGLE_SHEETS_CREDENTIALS: {GOOGLE_SHEETS_CREDENTIALS}")
        logging.info(f"GOOGLE_SHEETS_ID: {GOOGLE_SHEETS_ID}")
        print(f"GOOGLE_SHEETS_CREDENTIALS: {GOOGLE_SHEETS_CREDENTIALS}")
        print(f"GOOGLE_SHEETS_ID: {GOOGLE_SHEETS_ID}")

        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        try:
            creds = Credentials.from_service_account_file(GOOGLE_SHEETS_CREDENTIALS, scopes=scope)
        except Exception as e:
            logging.error(f"Ошибка при загрузке credentials: {str(e)}")
            print(f"Ошибка при загрузке credentials: {str(e)}")
            raise

        self.client = gspread.authorize(creds)
        try:
            self.spreadsheet = self.client.open_by_key(GOOGLE_SHEETS_ID)
            logging.info(f"Подключение к таблице с ID: {GOOGLE_SHEETS_ID}")
            print(f"Подключение к таблице с ID: {GOOGLE_SHEETS_ID}")
        except Exception as e:
            logging.error(f"Ошибка при подключении к таблице: {str(e)}")
            print(f"Ошибка при подключении к таблице: {str(e)}")
            raise

    def get_sheet(self, sheet_name):
        logging.info(f"Попытка получить лист: {sheet_name}")
        print(f"Попытка получить лист: {sheet_name}")
        try:
            return self.spreadsheet.worksheet(sheet_name)
        except gspread.exceptions.WorksheetNotFound:
            logging.error(f"Лист {sheet_name} не найден")
            print(f"Лист {sheet_name} не найден")
            return None
        except Exception as e:
            logging.error(f"Ошибка при получении листа {sheet_name}: {str(e)}")
            print(f"Ошибка при получении листа {sheet_name}: {str(e)}")
            return None

    def list_sheets(self):
        sheets = [worksheet.title for worksheet in self.spreadsheet.worksheets()]
        logging.info(f"Доступные листы: {sheets}")
        print(f"Доступные листы: {sheets}")
        return sheets

    def update_cell(self, sheet, row, col, value):
        sheet.update_cell(row, col, value)

    def get_all_data(self, sheet):
        logging.info("Чтение всех данных из листа")
        print("Чтение всех данных из листа")
        return sheet.get_all_values()

    def get_trading_coins(self):
        logging.info("Начало выполнения get_trading_coins")
        print("Начало выполнения get_trading_coins")
        sheet = self.get_sheet("analitics")
        if not sheet:
            logging.error("Не удалось получить лист analitics")
            print("Не удалось получить лист analitics")
            return []

        # Получаем только столбец "Торговля" (D, индекс 3)
        try:
            trading_column = sheet.col_values(4)  # 4 - индекс столбца D (нумерация с 1)
            logging.info(f"Получен столбец Торговля: {trading_column[:5]}... (первые 5 значений)")
            print(f"Получен столбец Торговля: {trading_column[:5]}... (первые 5 значений)")
        except Exception as e:
            logging.error(f"Ошибка при получении столбца Торговля: {str(e)}")
            print(f"Ошибка при получении столбца Торговля: {str(e)}")
            return []

        # Определяем индексы строк, где Торговля = TRUE
        valid_rows = [i for i, status in enumerate(trading_column[1:], start=2) if status.strip().upper() in ["TRUE", "TRU"]]
        logging.info(f"Найдено строк с TRUE: {len(valid_rows)} на индексах: {valid_rows}")
        print(f"Найдено строк с TRUE: {len(valid_rows)} на индексах: {valid_rows}")

        if not valid_rows:
            logging.warning("Нет строк с Торговля = TRUE")
            print("Нет строк с Торговля = TRUE")
            return []

        # Загружаем только нужные строки
        trading_coins = []
        for row_idx in valid_rows:
            try:
                row_data = sheet.row_values(row_idx)
                if len(row_data) > 12:
                    coin = row_data[6]  # Столбец G (индекс 6) — монета
                    long_level = row_data[9]  # Столбец J (индекс 9) — "Уровень 1 - LONG"
                    short_level = row_data[12]  # Столбец M (индекс 12) — "Уровень 1 - SHORT"

                    try:
                        long_level = float(long_level) if long_level else None
                        short_level = float(short_level) if short_level else None
                    except ValueError:
                        logging.warning(f"Невозможно преобразовать уровни для монеты {coin} в числа")
                        print(f"Невозможно преобразовать уровни для монеты {coin} в числа")
                        continue

                    trading_coins.append({
                        "coin": coin,
                        "long_level": long_level,
                        "short_level": short_level
                    })
                    logging.info(f"Добавлена монета: {coin}, long_level: {long_level}, short_level: {short_level}")
                    print(f"Добавлена монета: {coin}, long_level: {long_level}, short_level: {short_level}")
            except Exception as e:
                logging.error(f"Ошибка при обработке строки {row_idx}: {str(e)}")
                print(f"Ошибка при обработке строки {row_idx}: {str(e)}")
                continue

        logging.info(f"Найдено {len(trading_coins)} монет для мониторинга")
        print(f"Найдено {len(trading_coins)} монет для мониторинга")
        return trading_coins

if __name__ == "__main__":
    print("Запуск тестового скрипта...")
    try:
        client = GoogleSheetsClient()
        print("Клиент инициализирован, получение данных...")

        sheets = client.list_sheets()
        print(f"Доступные листы в таблице: {sheets}")

        coins = client.get_trading_coins()
        print(f"Найдено монет: {len(coins)}")
        for coin in coins:
            print(coin)
    except Exception as e:
        print(f"Произошла ошибка: {str(e)}")
        logging.error(f"Ошибка при выполнении: {str(e)}")